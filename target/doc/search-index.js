var searchIndex = {};
searchIndex["iter_cools"] = {"doc":"iter-cools - some iterators for fun","items":[[3,"ChunksIterator","iter_cools","An iterator that splits sequence into chunks. Chunck size is specified by the iterator `n`. This struct is created by the [`chunks_iter()`] method on [`ChunksIteratorTrait`]. [`chunks_iter()`]: trait.ChunksIteratorTrait.html#method.chunks_iter [`ChunksIteratorTrait`]: trait.ChunksIteratorTrait.html",null,null],[3,"MapOkIterator","","An iterator that maps the values of `iter` with `f`. This struct is created by the [`map_ok()`] method on [`MapOkTrait`]. [`map_ok()`]: trait.MapOkTrait.html#method.map_ok [`MapOkTrait`]: trait.MapOkTrait.html",null,null],[3,"FilterOkIterator","","An iterator that filters the elements of iter with predicate. This struct is created by the [`filter_ok()`]  method on [`FilterOkTrait`]. [`filter_ok()`]: trait.FilterOkTrait.html#method.filter_ok [`FilterOkTrait`]: trait.FilterOkTrait.html",null,null],[3,"PunctuateIterator","","An iterator that combines two iterative sequences. This struct is created by the [`punctuate()`] method on [`PunctuateTrait`]. [`punctuate()`]: trait.PunctuateTrait.html#method.join [`PunctuateTrait`]: trait.PunctuateTrait.html",null,null],[3,"FuseErrIterator","","An iterator that yields `None` forever after the underlying iterator yields `Some(Err(_))` once. This struct is created by the [`fuse_err()`] on [`FuseErrTrait`]. [`fuse_err()`]: trait.FuseErrTrait.html#method.fuse_err [`FuseErrTrait`]:trait.FuseErrTrait.html",null,null],[4,"RWError","","",null,null],[13,"Reader","","",0,null],[13,"Writer","","",0,null],[8,"ChunksIteratorTrait","","",null,null],[11,"chunks_iter","","It creates an iterator that splits sequence into chunks.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"}],"output":{"name":"chunksiterator"}}],[8,"MapOkTrait","","",null,null],[11,"map_ok","","Takes a closure and creates an iterator which calls that closure on each `Ok(_)` element.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapokiterator"}}],[8,"FilterOkTrait","","",null,null],[11,"filter_ok","","Creates an iterator which uses a closure to determine if an element should be yielded.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filterokiterator"}}],[8,"PunctuateTrait","","",null,null],[11,"punctuate","","Creates iterator that combines two iterative sequences.",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"punctuateiterator"}}],[8,"FuseErrTrait","","",null,null],[11,"fuse_err","","Creates an iterator which ends after the first `Some(Err(_))`.",5,{"inputs":[{"name":"self"}],"output":{"name":"fuseerriterator"}}],[8,"WriteIterBytes","","",null,null],[10,"write_to","","Attempts to write an entire iterator to the writer.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[8,"WriteIterResults","","",null,null],[10,"write_to","","Attempts to write an entire iterator to the writer.",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"chunksiterator"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"mapokiterator"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"filterokiterator"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"punctuateiterator"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fuseerriterator"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rwerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"iter_it","","Creates an iterator from the arguments.",null,null]],"paths":[[4,"RWError"],[8,"ChunksIteratorTrait"],[8,"MapOkTrait"],[8,"FilterOkTrait"],[8,"PunctuateTrait"],[8,"FuseErrTrait"],[8,"WriteIterBytes"],[8,"WriteIterResults"],[3,"ChunksIterator"],[3,"MapOkIterator"],[3,"FilterOkIterator"],[3,"PunctuateIterator"],[3,"FuseErrIterator"]]};
initSearch(searchIndex);
